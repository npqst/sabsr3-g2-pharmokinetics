""""
Solution.py: Class implementation for Solution of 1st Order ODE for
pharmokinetic model
Authors: SABS R3 Group 2
20.10.2021
"""

from pkmodel.AbstractSolution import AbstractSolution
import matplotlib.pyplot as plt
import os
import pandas as pd
import json


class Solution(AbstractSolution):
    """Solution

    :param AbstractSolution: [description]
    :type AbstractSolution: [type]
    """
    def __init__(self, solution_vector, parameter_dict) -> None:
        """Initialise instance of Solution class with a solution vector
        generated by Model.

        :param solution_vector: x * t matrix where x is number of compartments
        and t is length of time vector
        :type solution_vector: array of float
        """
        self.__solution_vector = solution_vector
        self.__parameter_dict = parameter_dict

    @property
    def get_solution(self):
        """Return list of y and t arrays from solution vector

        :return: list of y, t --> where y = np.array of quantities and
        <-- t = np.array of time
        :rtype: list of numpy arrays
        """
        vector = self.__solution_vector
        y = vector.y
        t = vector.t
        return [y, t]

    @property
    def get_parameters(self):
        """Return parameter dictionary

        :return dictionary of paremters
        :type: dict
        """
        return self.__parameter_dict

    def generate_plot(self):
        """ Generate solution vector plots

        :return: plots of quantity vs time for each compartment
        :type: matplotlib plot
        """
        array_list = self.get_solution
        #generate figure
        f = plt.figure()

        t = array_list[1]

        for i in range(array_list[0].shape[0]):
            #iterate over each compartment and sequentially plot
            y = array_list[0][i, :]
            if i == 0:
                plt.plot(t, y, figure=f, label='central compartment')
            else:
                #add legend labels for each peripheral compartment
                label = 'peripheral compartment ' + str(i)
                plt.plot(t, y, figure=f, label=label)

        plt.legend()
        plt.title('Quantity(t) for drug in central & peripheral components')
        plt.xlabel('Time')
        plt.ylabel('Quantity')

        return f

    def show_plot(self):
        """ displays plot for testing

        :return: nill
        """
        self.generate_plot()
        plt.show()

    def save_plot(self, dir_path, model_no):
        """ saves plot of solutions as png

        :return: nill
        """
        self.generate_plot()
        plt.savefig('{0}{1}_plot.png'.format(dir_path, model_no))

    def save_parameters(self, dir_path, model_no):
        """ saves input parameters in text file

        :return: nill
        """
        param_dict = self.get_parameters
        del param_dict['dose_mode']

        with open('{0}{1}_params.txt'.format(dir_path,
                                             model_no), 'w') as file:
            file.write(json.dumps(param_dict))

    def save_solution(self, dir_path, model_no):
        """ saves solutions in a csv file

        :return: nill
        """
        solution = self.get_solution
        df_t = pd.DataFrame(solution[1])
        df_t = df_t.rename(columns={0: 'Time'})
        df_y = pd.DataFrame(solution[0]).T
        df = pd.merge(df_t, df_y, left_index=True, right_index=True)

        df.to_csv('{0}{1}_solution.csv'.format(dir_path,
                                               model_no), index=True)

    def output(self):
        """ creates and populates output directory
        <-- with saved plot, parameters, and solution

        :return: nill
        """
        parameter_dict = self.get_parameters
        #check run mode - either test or save
        if parameter_dict['run_mode'] == 'save':
            #run mode save = save graph fig
            dir_path = './Output/'
            if not os.path.isdir(dir_path):
                os.mkdir(dir_path)
            self.save_plot(dir_path, parameter_dict['name'])
            self.save_parameters(dir_path, parameter_dict['name'])
            self.save_solution(dir_path, parameter_dict['name'])
        elif parameter_dict['run_mode'] == 'test':
            #run mode test = show plot without save
            self.show_plot()


